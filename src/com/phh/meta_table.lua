---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by gientech.
--- DateTime: 2023/3/22 11:37
---

-- 元方法
meta2 = {
    --当子表要被当做字符串使用时 会默认调用这个元表中的tostring方法
    __tostring = function(t)
        return t.name
    end,
    --当子表被当做一个函数来使用时 会默认调用这个__call中的内容
    --当希望传参数时 一定要记住 默认第一个参数 是调用者自己
    __call = function(a, b)
        print(a)
        print(b)
        print("call running...")
    end
}
mTable2 = {
    name = "canon",
    model = "D505",
}
setmetatable(mTable2, meta2)
--会调用元表的__tostring方法
print(mTable2)
--把子表当做函数使用 就会调用元表的 __call方法
mTable2("abc")

print("**********特定操作-运算符重载************")
meta4 = {
    --相当于运算符重载 当子表使用+运算符时 会调用该方法
    --运算符+
    __add = function(t1, t2)
        return t1.age + t2.age
    end,
    --运算符-
    __sub = function(t1, t2)
        return t1.age - t2.age
    end,
    --运算符*
    __mul = function(t1, t2)
        return 1
    end,
    --运算符/
    __div = function(t1, t2)
        return 2
    end,
    --运算符%
    __mod = function(t1, t2)
        return 3
    end,
    --运算符^
    __pow = function(t1, t2)
        return 4
    end,
    --运算符==
    __eq = function(t1, t2)
        return true
    end,
    --运算符<
    __lt = function(t1, t2)
        return true
    end,
    --运算符<=
    __le = function(t1, t2)
        return false
    end,
    --运算符..
    __concat = function(t1, t2)
        return "567"
    end

}
--如果要用条件运算符 来比较两个对象
--这两个对象的元表一定要一致 才能准确调用方法
myTable4 = { age = 1 }
setmetatable(myTable4, meta4)
myTable5 = { age = 2 }
setmetatable(myTable5, meta4)

print(myTable4 + myTable5)
print(myTable4 - myTable5)
print(myTable4 * myTable5)
print(myTable4 / myTable5)
print(myTable4 % myTable5)
print(myTable4 ^ myTable5)
print(myTable4 == myTable5)
print(myTable4 > myTable5)
print(myTable4 <= myTable5)
print(myTable4 .. myTable5)

---__index 元方法
---这是 metatable 最常用的键。
---当你通过键来访问 table 的时候，如果这个键没有值，
---那么Lua就会寻找该table的metatable（假定有metatable）中的__index 指定的表中去查找。
meta6Father = {
    age = 18
}
meta6Father.__index = meta6Father

meta6 = {
    --age = 18
}
--__index的赋值 写在表外面来初始化
meta6.__index = meta6
--meta6.__index = {age = 2}

myTable6 = {}
setmetatable(meta6, meta6Father)
setmetatable(myTable6, meta6)

print(myTable6.age)				-- 18

--rawget 当我们使用它时 只会去找自己身上有没有这个变量
--myTable6.age = 1
print(rawget(myTable6, "age")) 	--nil


